{"version":3,"file":"gaussian-splats-3d.umd.min.cjs","sources":["../src/SplatBuffer.js","../src/AbortablePromise.js","../src/Util.js","../src/SplatCompressor.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SceneFormat.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/SplatScene.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/Constants.js","../src/SplatMesh.js","../src/worker/SortWorker.js","../src/worker/sorter.wasm","../src/Viewer.js","../src/DropInViewer.js"],"sourcesContent":["import * as THREE from 'three';\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerScale: 12,\n            BytesPerColor: 4,\n            BytesPerRotation: 16,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerColor: 4,\n            BytesPerRotation: 8,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n    static CovarianceSizeBytes = 24;\n\n    static HeaderSizeBytes = 1024;\n\n    constructor(bufferData) {\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n        this.versionMajor = this.headerArrayUint8[0];\n        this.versionMinor = this.headerArrayUint8[1];\n        this.headerExtraK = this.headerArrayUint8[2];\n        this.compressionLevel = this.headerArrayUint8[3];\n        this.splatCount = this.headerArrayUint32[1];\n        this.bucketSize = this.headerArrayUint32[2];\n        this.bucketCount = this.headerArrayUint32[3];\n        this.bucketBlockSize = this.headerArrayFloat32[4];\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\n        this.bytesPerBucket = this.headerArrayUint32[5];\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\n\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\n\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\n\n        this.linkBufferArrays();\n    }\n\n    linkBufferArrays() {\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\n        this.centerArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.CenterComponentCount);\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerCenter * this.splatCount,\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerCenter + this.bytesPerScale) * this.splatCount,\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\n        this.rotationArray = new FloatArray(this.splatBufferData,\n                                             (this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    getHeaderBufferData() {\n        return this.headerBufferData;\n    }\n\n    getSplatBufferData() {\n        return this.splatBufferData;\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getSplatCenter(index, outCenter, transform) {\n        let bucket = [0, 0, 0];\n        const centerBase = index * SplatBuffer.CenterComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            outCenter.x = (this.centerArray[centerBase] - sr) * sf + bucket[0];\n            outCenter.y = (this.centerArray[centerBase + 1] - sr) * sf + bucket[1];\n            outCenter.z = (this.centerArray[centerBase + 2] - sr) * sf + bucket[2];\n        } else {\n            outCenter.x = this.centerArray[centerBase];\n            outCenter.y = this.centerArray[centerBase + 1];\n            outCenter.z = this.centerArray[centerBase + 2];\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n\n        return function(index, outScale, outRotation, transform) {\n            const scaleBase = index * SplatBuffer.ScaleComponentCount;\n            outScale.set(this.fbf(this.scaleArray[scaleBase]),\n                         this.fbf(this.scaleArray[scaleBase + 1]),\n                         this.fbf(this.scaleArray[scaleBase + 2]));\n            const rotationBase = index * SplatBuffer.RotationComponentCount;\n            outRotation.set(this.fbf(this.rotationArray[rotationBase + 1]), this.fbf(this.rotationArray[rotationBase + 2]),\n                            this.fbf(this.rotationArray[rotationBase + 3]), this.fbf(this.rotationArray[rotationBase]));\n            if (transform) {\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            }\n        };\n\n    }();\n\n    getSplatColor(index, outColor, transform) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\n        // TODO: apply transform for spherical harmonics\n    }\n\n    fillSplatCenterArray(outCenterArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n        let bucket = [0, 0, 0];\n        const center = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const centerSrcBase = i * SplatBuffer.CenterComponentCount;\n            const centerDestBase = (i + destOffset) * SplatBuffer.CenterComponentCount;\n            if (this.compressionLevel > 0) {\n                const bucketIndex = Math.floor(i / this.bucketSize);\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n                const sf = this.compressionScaleFactor;\n                const sr = this.compressionScaleRange;\n                center.x = (this.centerArray[centerSrcBase] - sr) * sf + bucket[0];\n                center.y = (this.centerArray[centerSrcBase + 1] - sr) * sf + bucket[1];\n                center.z = (this.centerArray[centerSrcBase + 2] - sr) * sf + bucket[2];\n            } else {\n                center.x = this.centerArray[centerSrcBase];\n                center.y = this.centerArray[centerSrcBase + 1];\n                center.z = this.centerArray[centerSrcBase + 2];\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    fillSplatCovarianceArray(covarianceArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const rotationMatrix = new THREE.Matrix3();\n        const scaleMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            scale.set(this.fbf(this.scaleArray[scaleBase]),\n                      this.fbf(this.scaleArray[scaleBase + 1]),\n                      this.fbf(this.scaleArray[scaleBase + 2]));\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            rotation.set(this.fbf(this.rotationArray[rotationBase + 1]),\n                         this.fbf(this.rotationArray[rotationBase + 2]),\n                         this.fbf(this.rotationArray[rotationBase + 3]),\n                         this.fbf(this.rotationArray[rotationBase]));\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n            const covBase = SplatBuffer.CovarianceSizeFloats * (i + destOffset);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            covarianceArray[covBase] = transformedCovariance.elements[0];\n            covarianceArray[covBase + 1] = transformedCovariance.elements[3];\n            covarianceArray[covBase + 2] = transformedCovariance.elements[6];\n            covarianceArray[covBase + 3] = transformedCovariance.elements[4];\n            covarianceArray[covBase + 4] = transformedCovariance.elements[7];\n            covarianceArray[covBase + 5] = transformedCovariance.elements[8];\n        }\n    }\n\n    fillSplatColorArray(outColorArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const colorSrcBase = i * SplatBuffer.ColorComponentCount;\n            const colorDestBase = (i + destOffset) * SplatBuffer.ColorComponentCount;\n            outColorArray[colorDestBase] = this.colorArray[colorSrcBase];\n            outColorArray[colorDestBase + 1] = this.colorArray[colorSrcBase + 1];\n            outColorArray[colorDestBase + 2] = this.colorArray[colorSrcBase + 2];\n            outColorArray[colorDestBase + 3] = this.colorArray[colorSrcBase + 3];\n            // TODO: implement application of transform for spherical harmonics\n        }\n    }\n}\n","/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    constructor(promiseFunc, abortHandler) {\n\n        let promiseResolve;\n        let promiseReject;\n        this.promise = new Promise((resolve, reject) => {\n            promiseResolve = resolve.bind(this);\n            promiseReject = reject.bind(this);\n        });\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n    static resolve(data) {\n        return new AbortablePromise((resolve) => {\n            resolve(data);\n        });\n    }\n\n    static reject(error) {\n        return new AbortablePromise((resolve, reject) => {\n            reject(error);\n        });\n    }\n}\n","import { AbortablePromise } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = () => {\n        abortController.abort();\n        rejectFunc('Fetch aborted');\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk);\n                        }\n                        const buffer = new Blob(chunks).arrayBuffer();\n                        resolve(buffer);\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    chunks.push(chunk);\n                    if (onProgress) {\n                        onProgress(percent, percentLabel, chunk);\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n    if (object3D.geometry) {\n        object3D.geometry.dispose();\n        object3D.geometry = null;\n    }\n    if (object3D.material) {\n        object3D.material.dispose();\n        object3D.material = null;\n    }\n    if (object3D.children) {\n        for (let child of object3D.children) {\n            disposeAllMeshes(child);\n        }\n    }\n};\n","import * as THREE from 'three';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { clamp } from './Util.js';\n\nconst SplatBufferBucketSize = 256;\nconst SplatBufferBucketBlockSize = 5.0;\n\nclass UncompressedSplatArray {\n\n    constructor() {\n        this.splatCount = 0;\n        this.scale_0 = [];\n        this.scale_1 = [];\n        this.scale_2 = [];\n        this.rot_0 = [];\n        this.rot_1 = [];\n        this.rot_2 = [];\n        this.rot_3 = [];\n        this.x = [];\n        this.y = [];\n        this.z = [];\n        this.f_dc_0 = [];\n        this.f_dc_1 = [];\n        this.f_dc_2 = [];\n        this.opacity = [];\n    }\n\n    addSplat(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\n        this.x.push(x);\n        this.y.push(y);\n        this.z.push(z);\n        this.scale_0.push(scale0);\n        this.scale_1.push(scale1);\n        this.scale_2.push(scale2);\n        this.rot_0.push(rot0);\n        this.rot_1.push(rot1);\n        this.rot_2.push(rot2);\n        this.rot_3.push(rot3);\n        this.f_dc_0.push(r);\n        this.f_dc_1.push(g);\n        this.f_dc_2.push(b);\n        this.opacity.push(opacity);\n        this.splatCount++;\n    }\n}\n\nexport class SplatCompressor {\n\n    constructor(compressionLevel = 0, minimumAlpha = 1, blockSize = SplatBufferBucketBlockSize, bucketSize = SplatBufferBucketSize) {\n        this.compressionLevel = compressionLevel;\n        this.minimumAlpha = minimumAlpha;\n        this.bucketSize = bucketSize;\n        this.blockSize = blockSize;\n    }\n\n    static createEmptyUncompressedSplatArray() {\n        return new UncompressedSplatArray();\n    }\n\n    uncompressedSplatArrayToSplatBuffer(splatArray) {\n\n        const validSplats = SplatCompressor.createEmptyUncompressedSplatArray();\n        validSplats.addSplat(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0);\n\n        for (let i = 0; i < splatArray.splatCount; i++) {\n            let alpha;\n            if (splatArray['opacity'][i]) {\n                alpha = splatArray['opacity'][i];\n            } else {\n                alpha = 255;\n            }\n            if (alpha >= this.minimumAlpha) {\n                validSplats.addSplat(splatArray['x'][i], splatArray['y'][i], splatArray['z'][i],\n                                     splatArray['scale_0'][i], splatArray['scale_1'][i], splatArray['scale_2'][i],\n                                     splatArray['rot_0'][i], splatArray['rot_1'][i], splatArray['rot_2'][i], splatArray['rot_3'][i],\n                                     splatArray['f_dc_0'][i], splatArray['f_dc_1'][i], splatArray['f_dc_2'][i], splatArray['opacity'][i]);\n            }\n        }\n\n        const buckets = this.computeBucketsForUncompressedSplatArray(validSplats);\n\n        const paddedSplatCount = buckets.length * this.bucketSize;\n        const headerSize = SplatBuffer.HeaderSizeBytes;\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\n        header[3] = this.compressionLevel;\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\n\n        let bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        let bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        let bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        let bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n        const centerBuffer = new ArrayBuffer(bytesPerCenter * paddedSplatCount);\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\n\n        const blockHalfSize = this.blockSize / 2.0;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n        const bucketCenter = new THREE.Vector3();\n        const bucketCenterDelta = new THREE.Vector3();\n        let outSplatIndex = 0;\n        for (let b = 0; b < buckets.length; b++) {\n            const bucket = buckets[b];\n            bucketCenter.fromArray(bucket.center);\n            for (let i = 0; i < bucket.splats.length; i++) {\n                let row = bucket.splats[i];\n                let invalidSplat = false;\n                if (row === 0) {\n                    invalidSplat = true;\n                }\n\n                if (this.compressionLevel === 0) {\n                    const center = new Float32Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\n                    const scale = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    if (validSplats['scale_0'][row] !== undefined) {\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\n                        quat.normalize();\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\n                        scale.set([validSplats['scale_0'][row], validSplats['scale_1'][row], validSplats['scale_2'][row]]);\n                    } else {\n                        scale.set([0.01, 0.01, 0.01]);\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\n                    }\n                    center.set([validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]]);\n                } else {\n                    const center = new Uint16Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\n                    const scale = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n                    if (validSplats['scale_0'][row] !== undefined) {\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\n                        quat.normalize();\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\n                        scale.set([thf(validSplats['scale_0'][row]), thf(validSplats['scale_1'][row]), thf(validSplats['scale_2'][row])]);\n                    } else {\n                        scale.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        rot.set([thf(1.), 0, 0, 0]);\n                    }\n                    bucketCenterDelta.set(validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]).sub(bucketCenter);\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                    center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                }\n\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\n                if (invalidSplat) {\n                    rgba[0] = 255;\n                    rgba[1] = 0;\n                    rgba[2] = 0;\n                    rgba[3] = 0;\n                } else {\n                    if (validSplats['f_dc_0'][row] !== undefined) {\n                        rgba.set([validSplats['f_dc_0'][row], validSplats['f_dc_1'][row], validSplats['f_dc_2'][row]]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (validSplats['opacity'][row] !== undefined) {\n                        rgba[3] = validSplats['opacity'][row];\n                    } else {\n                        rgba[3] = 255;\n                    }\n                }\n\n                outSplatIndex++;\n            }\n        }\n\n        const bytesPerBucket = 12;\n        const bucketsSize = bytesPerBucket * buckets.length;\n        const splatDataBufferSize = centerBuffer.byteLength + scaleBuffer.byteLength +\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\n\n        const headerArrayUint32 = new Uint32Array(header.buffer);\n        const headerArrayFloat32 = new Float32Array(header.buffer);\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\n        if (this.compressionLevel > 0) {\n            unifiedBufferSize += bucketsSize;\n            headerArrayUint32[2] = this.bucketSize;\n            headerArrayUint32[3] = buckets.length;\n            headerArrayFloat32[4] = this.blockSize;\n            headerArrayUint32[5] = bytesPerBucket;\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        }\n\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\n        new Uint8Array(unifiedBuffer, headerSize, centerBuffer.byteLength).set(new Uint8Array(centerBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength,\n                    colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\n                    rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\n\n        if (this.compressionLevel > 0) {\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\n            for (let i = 0; i < buckets.length; i++) {\n                const bucket = buckets[i];\n                const base = i * 3;\n                bucketArray[base] = bucket.center[0];\n                bucketArray[base + 1] = bucket.center[1];\n                bucketArray[base + 2] = bucket.center[2];\n            }\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    computeBucketsForUncompressedSplatArray(splatArray) {\n        let splatCount = splatArray.splatCount;\n        const blockSize = this.blockSize;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\n            const xBlock = Math.ceil((center[0] - min.x) / blockSize);\n            const yBlock = Math.ceil((center[1] - min.y) / blockSize);\n            const zBlock = Math.ceil((center[2] - min.z) / blockSize);\n\n            blockCenter.x = (xBlock - 1) * blockSize + min.x + halfBlockSize;\n            blockCenter.y = (yBlock - 1) * blockSize + min.y + halfBlockSize;\n            blockCenter.z = (zBlock - 1) * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= this.bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        // fill partially full buckets with invalid splats (splat 0)\n        // to get them up to this.bucketSize\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    while (bucket.splats.length < this.bucketSize) {\n                        bucket.splats.push(0);\n                    }\n                    fullBuckets.push(bucket);\n                }\n            }\n        }\n\n        return fullBuckets;\n    }\n}\n","import { SplatCompressor } from './SplatCompressor.js';\n\nexport class PlyParser {\n\n    constructor(plyBuffer) {\n        this.plyBuffer = plyBuffer;\n    }\n\n    decodeHeader(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n\n        console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\n\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n            if (endHeaderTestText.includes('end_header')) {\n                break;\n            }\n        }\n\n        const headerLines = headerText.split('\\n');\n\n        let splatCount = 0;\n        let propertyTypes = {};\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === 'end_header') {\n                break;\n            }\n        }\n\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'vertexData': vertexData,\n            'headerOffset': headerOffset\n        };\n    }\n\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize) {\n\n        const startTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT...');\n\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\n\n        // figure out the SH degree from the number of coefficients\n        let nRestCoeffs = 0;\n        for (const propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        const nCoeffsPerColor = nRestCoeffs / 3;\n\n        // TODO: Eventually properly support multiple degree spherical harmonics\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        const sphericalHarmonicsDegree = 0;\n\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n        // figure out the order in which spherical harmonics should be read\n        const shFeatureOrder = [];\n        for (let rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(`f_dc_${rgb}`);\n        }\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n            }\n        }\n\n        let plyRowSize = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = plyRowSize;\n                plyRowSize += fieldSize[type];\n            }\n        }\n\n        let rawVertex = {};\n\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\n\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\n\n        for (let row = 0; row < splatCount; row++) {\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            if (rawVertex['scale_0'] !== undefined) {\n                splatArray['scale_0'][row] = Math.exp(rawVertex['scale_0']);\n                splatArray['scale_1'][row] = Math.exp(rawVertex['scale_1']);\n                splatArray['scale_2'][row] = Math.exp(rawVertex['scale_2']);\n            } else {\n                splatArray['scale_0'][row] = 0.01;\n                splatArray['scale_1'][row] = 0.01;\n                splatArray['scale_2'][row] = 0.01;\n            }\n\n            if (rawVertex['f_dc_0'] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                splatArray['f_dc_0'][row] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\n                splatArray['f_dc_1'][row] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\n                splatArray['f_dc_2'][row] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\n            } else {\n                splatArray['f_dc_0'][row] = 0;\n                splatArray['f_dc_1'][row] = 0;\n                splatArray['f_dc_2'][row] = 0;\n            }\n            if (rawVertex['opacity'] !== undefined) {\n                splatArray['opacity'][row] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\n            }\n\n            splatArray['rot_0'][row] = rawVertex['rot_0'];\n            splatArray['rot_1'][row] = rawVertex['rot_1'];\n            splatArray['rot_2'][row] = rawVertex['rot_2'];\n            splatArray['rot_3'][row] = rawVertex['rot_3'];\n\n            splatArray['x'][row] = rawVertex['x'];\n            splatArray['y'][row] = rawVertex['y'];\n            splatArray['z'][row] = rawVertex['z'];\n            splatArray.splatCount++;\n        }\n\n        const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\n        const splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\n\n        console.log('Total valid splats: ', splatBuffer.getSplatCount(), 'out of', splatCount);\n\n        const endTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT complete!');\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\n\n        return splatBuffer;\n    }\n\n}\n","import { PlyParser } from './PlyParser.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class PlyLoader {\n\n    constructor() {\n        this.splatBuffer = null;\n    }\n\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize) {\n        return fetchWithProgress(fileName, onProgress).then((plyFileData) => {\n            const plyParser = new PlyParser(plyFileData);\n            const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize);\n            this.splatBuffer = splatBuffer;\n            return splatBuffer;\n        });\n    }\n\n}\n","export const SceneFormat = {\n    'Splat': 0,\n    'KSplat': 1,\n    'Ply': 2\n};\n","import * as THREE from 'three';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { SplatCompressor } from './SplatCompressor.js';\nimport { fetchWithProgress } from './Util.js';\nimport { SceneFormat } from './SceneFormat.js';\n\nexport class SplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n    static isFileSplatFormat(fileName) {\n        return SplatLoader.isCustomSplatFormat(fileName) || SplatLoader.isStandardSplatFormat(fileName);\n    }\n\n    static isCustomSplatFormat(fileName) {\n        return fileName.endsWith('.ksplat');\n    }\n\n    static isStandardSplatFormat(fileName) {\n        return fileName.endsWith('.splat');\n    }\n\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize, format) {\n        return fetchWithProgress(fileName, onProgress).then((bufferData) => {\n            const isCustomSplatFormat = format === SceneFormat.KSplat || SplatLoader.isCustomSplatFormat(fileName);\n            let splatBuffer;\n            if (isCustomSplatFormat) {\n                splatBuffer = new SplatBuffer(bufferData);\n            } else {\n                const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\n                const splatArray = SplatLoader.parseStandardSplatToUncompressedSplatArray(bufferData);\n                splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\n            }\n            return splatBuffer;\n        });\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const InBufferRowSizeBytes = 32;\n        const splatCount = inBuffer.byteLength / InBufferRowSizeBytes;\n\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inCenterSizeBytes = 3 * 4;\n            const inScaleSizeBytes = 3 * 4;\n            const inColorSizeBytes = 4;\n            const inBase = i * InBufferRowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + inCenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes + inColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplat(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n    downloadFile(fileName) {\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\n            type: 'application/octet-stream',\n        });\n\n        if (!this.downLoadLink) {\n            this.downLoadLink = document.createElement('a');\n            document.body.appendChild(this.downLoadLink);\n        }\n        this.downLoadLink.download = fileName;\n        this.downLoadLink.href = URL.createObjectURL(blob);\n        this.downLoadLink.click();\n    }\n\n}\n","import {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export class LoadingSpinner {\n\n    constructor(message, container) {\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerDivContainerOuter = document.createElement('div');\n        this.spinnerDivContainerOuter.className = 'outerContainer';\n        this.spinnerDivContainerOuter.style.display = 'none';\n\n        this.spinnerDivContainer = document.createElement('div');\n        this.spinnerDivContainer.className = 'container';\n\n        this.spinnerDiv = document.createElement('div');\n        this.spinnerDiv.className = 'loader';\n\n        this.messageDiv = document.createElement('div');\n        this.messageDiv.className = 'message';\n        this.messageDiv.innerHTML = this.message;\n\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\n        this.spinnerDivContainer.appendChild(this.messageDiv);\n        this.spinnerDivContainerOuter.appendChild(this.spinnerDivContainer);\n        this.container.appendChild(this.spinnerDivContainerOuter);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .message {\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                padding-top:15px;\n                width: 180px;\n            }\n\n            .outerContainer {\n                width: 100%;\n                height: 100%;\n            }\n\n            .container {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n            }\n\n            .loader {\n                width: 120px;        /* the size */\n                padding: 15px;       /* the border thickness */\n                background: #07e8d6; /* the color */\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n                margin-left: 30px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerDivContainerOuter.appendChild(style);\n    }\n\n    show() {\n        this.spinnerDivContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.spinnerDivContainerOuter.style.display = 'none';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerDivContainerOuter);\n        }\n        this.container = container;\n        this.container.appendChild(this.spinnerDivContainerOuter);\n        this.spinnerDivContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n    }\n\n    setMessage(msg) {\n        this.messageDiv.innerHTML = msg;\n    }\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n\n    constructor(threeScene) {\n        this.threeScene = threeScene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.destroySplatRendertarget();\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    destroySplatRendertarget() {\n        if (this.splatRenderTarget) {\n            this.splatRenderTarget = null;\n        }\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    destroyRenderTargetCopyObjects() {\n        if (this.renderTargetCopyQuad) {\n            disposeAllMeshes(this.renderTargetCopyQuad);\n            this.renderTargetCopyQuad = null;\n        }\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.threeScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            disposeAllMeshes(this.meshCursor);\n            this.threeScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n        }\n    }\n\n    destroyFocusMarker() {\n        if (this.focusMarker) {\n            disposeAllMeshes(this.focusMarker);\n            this.focusMarker = null;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            this.focusMarker.position.copy(tempPosition);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        if (!this.controlPlane) {\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\n            planeGeometry.rotateX(-Math.PI / 2);\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n            planeMaterial.transparent = true;\n            planeMaterial.opacity = 0.6;\n            planeMaterial.depthTest = false;\n            planeMaterial.depthWrite = false;\n            planeMaterial.side = THREE.DoubleSide;\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n            const arrowDir = new THREE.Vector3(0, 1, 0);\n            arrowDir.normalize();\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\n            const arrowLength = 0.5;\n            const arrowRadius = 0.01;\n            const arrowColor = 0x00dd00;\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n            this.controlPlane = new THREE.Object3D();\n            this.controlPlane.add(planeMesh);\n            this.controlPlane.add(arrowHelper);\n        }\n    }\n\n    destroyControlPlane() {\n        if (this.controlPlane) {\n            disposeAllMeshes(this.controlPlane);\n            this.controlPlane = null;\n        }\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.threeScene.add(this.debugRoot);\n        this.threeScene.add(this.secondaryDebugRoot);\n    }\n\n    destroyDebugMeshes() {\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n            if (debugRoot) {\n                disposeAllMeshes(debugRoot);\n                this.threeScene.remove(debugRoot);\n            }\n        }\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n\n    dispose() {\n        this.destroyMeshCursor();\n        this.destroyFocusMarker();\n        this.destroyDebugMeshes();\n        this.destroyControlPlane();\n        this.destroyRenderTargetCopyObjects();\n        this.destroySplatRendertarget();\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n        this.splatIndex = 0;\n    }\n\n    set(origin, normal, distance, splatIndex) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n        this.splatIndex = splatIndex;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        hitClone.splatIndex = this.splatIndex;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n        this.ray = new Ray(origin, direction);\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const localRay = new Ray();\n        const tempPoint = new THREE.Vector3();\n\n        return function(splatMesh, outHits = []) {\n            const splatTree = splatMesh.getSplatTree();\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n\n                fromLocal.copy(splatMesh.matrixWorld);\n                splatMesh.getSceneTransform(s, sceneTransform);\n                fromLocal.multiply(sceneTransform);\n                toLocal.copy(fromLocal).invert();\n\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\n\n                const outHitsForSubTree = [];\n                if (subTree.rootNode) {\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\n                }\n\n                outHitsForSubTree.forEach((hit) => {\n                    hit.origin.applyMatrix4(fromLocal);\n                    hit.normal.applyMatrix4(fromLocal).normalize();\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\n                });\n\n                outHits.push(...outHitsForSubTree);\n            }\n\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempColor = new THREE.Vector4();\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        const origin = new THREE.Vector3(0, 0, 0);\n        const uniformScaleMatrix = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatGlobalIndex = node.data.indexes[i];\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor, false);\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter, false);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation, false);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            outHits.push(hitClone);\n                        }\n                    } else {\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\n                        toSphereSpace.copy(fromSphereSpace).invert();\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                            outHits.push(hitClone);\n                        }\n                    }\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene {\n\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(), scale = new THREE.Vector3(1, 1, 1)) {\n        this.splatBuffer = splatBuffer;\n        this.position = position.clone();\n        this.quaternion = quaternion.clone();\n        this.scale = scale.clone();\n        this.transform = new THREE.Matrix4();\n        this.updateTransform();\n    }\n\n    copyTransformData(otherScene) {\n        this.position.copy(otherScene.position);\n        this.quaternion.copy(otherScene.quaternion);\n        this.scale.copy(otherScene.scale);\n        this.transform.copy(otherScene.transform);\n    }\n\n    updateTransform() {\n        this.transform.compose(this.position, this.quaternion, this.scale);\n    }\n}\n","import * as THREE from 'three';\n\nlet idGen = 0;\n\nexport class SplatTreeNode {\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || idGen++;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTreeNode } from './SplatTreeNode.js';\n\nclass SplatSubTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.splatMesh = null;\n        this.rootNode = null;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n    }\n\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.splatMesh = null;\n        this.subTrees = [];\n    }\n\n    processSplatMesh(splatMesh, filterFunc = () => true) {\n        this.splatMesh = splatMesh;\n        this.subTrees = [];\n        const center = new THREE.Vector3();\n\n        const buildSubTree = function(splatOffset, splatCount, maxDepth, maxCentersPerNode) {\n            const subTree = new SplatSubTree(maxDepth, maxCentersPerNode);\n            let validSplatCount = 0;\n            const indexes = [];\n            for (let i = 0; i < splatCount; i++) {\n                const globalSplatIndex = i + splatOffset;\n                if (filterFunc(globalSplatIndex)) {\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\n                    if (validSplatCount === 0 || center.x < subTree.sceneMin.x) subTree.sceneMin.x = center.x;\n                    if (validSplatCount === 0 || center.x > subTree.sceneMax.x) subTree.sceneMax.x = center.x;\n                    if (validSplatCount === 0 || center.y < subTree.sceneMin.y) subTree.sceneMin.y = center.y;\n                    if (validSplatCount === 0 || center.y > subTree.sceneMax.y) subTree.sceneMax.y = center.y;\n                    if (validSplatCount === 0 || center.z < subTree.sceneMin.z) subTree.sceneMin.z = center.z;\n                    if (validSplatCount === 0 || center.z > subTree.sceneMax.z) subTree.sceneMax.z = center.z;\n                    validSplatCount++;\n                    indexes.push(globalSplatIndex);\n                }\n            }\n\n            subTree.sceneDimensions.copy(subTree.sceneMax).sub(subTree.sceneMin);\n\n            subTree.rootNode = new SplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\n            subTree.rootNode.data = {\n                'indexes': indexes\n            };\n\n            return subTree;\n        };\n\n        if (splatMesh.dynamicMode) {\n            let splatOffset = 0;\n            for (let s = 0; s < splatMesh.scenes.length; s++) {\n                const scene = splatMesh.getScene(s);\n                const splatCount = scene.splatBuffer.getSplatCount();\n                const subTree = buildSubTree(splatOffset, splatCount, this.maxDepth, this.maxCentersPerNode);\n                this.subTrees[s] = subTree;\n                SplatTree.processNode(subTree, subTree.rootNode, splatMesh);\n                splatOffset += splatCount;\n            }\n        } else {\n            const subTree = buildSubTree(0, splatMesh.getSplatCount(), this.maxDepth, this.maxCentersPerNode);\n            this.subTrees[0] = subTree;\n            SplatTree.processNode(subTree, subTree.rootNode, splatMesh);\n        }\n    }\n\n    static processNode(tree, node, splatMesh) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    tree.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            tree.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\n\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            splatMesh.getSplatCenter(splatGlobalIndex, center);\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            SplatTree.processNode(tree, child, splatMesh);\n        }\n    }\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        for (let subTree of this.subTrees) {\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\n        }\n    }\n\n}\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n    static MaxScenes = 32;\n\n}\n","import * as THREE from 'three';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\nimport { Constants } from './Constants.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false) {\n        super(dummyGeometry, dummyMaterial);\n        // Reference to a Three.js renderer\n        this.renderer = undefined;\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n        this.dynamicMode = dynamicMode;\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n        this.devicePixelRatio = devicePixelRatio;\n        // Use a transform feedback to calculate splat distances from the camera\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        // Use a faster integer-based approach for calculating splat distances from the camera\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\n        this.scenes = [];\n        // Special octree tailored to SplatMesh instances\n        this.splatTree = null;\n        // Textures in which splat data will be stored for rendering\n        this.splatDataTextures = null;\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n    }\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @return {THREE.ShaderMaterial}\n     */\n    static buildMaterial(dynamicMode = false) {\n\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\n        // 2D covariance) that is ultimately rasterized\n        let vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;`;\n\n        if (dynamicMode) {\n            vertexShaderSource += `\n                uniform highp usampler2D transformIndexesTexture;\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\n                uniform vec2 transformIndexesTextureSize;\n            `;\n        }\n\n        vertexShaderSource += `\n            uniform vec2 focal;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\n\n            if (dynamicMode) {\n                vertexShaderSource += `\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\n                    mat4 transform = transforms[transformIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                `;\n            } else {\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n            }\n\n            vertexShaderSource += `\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy * 2.0;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result. (This assumes\n                // the current projection is a perspective projection).\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\n                // matrix (called 'conic') to determine fragment opacity.\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(trace * trace / 4.0 - D);\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = max(traceOver2 - term2, 0.00); // prevent negative eigen value\n\n                float transparentAdjust = step(1.0 / 255.0, vColor.a);\n                eigenValue2 = eigenValue2 * transparentAdjust; // hide splat if alpha is zero\n\n                const float maxSplatSize = 1024.0;\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport;\n\n                gl_Position = vec4(ndcCenter.xy  + ndcOffset, ndcCenter.z, 1.0);\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // compute the negative squared distance from the center of the splat to the\n                // current fragment in the splat's local space.\n                float A = -dot(vPosition, vPosition);\n                if (A < -4.0) discard;\n                vec3 color = vColor.rgb;\n                A = exp(A) * vColor.a;\n                gl_FragColor = vec4(color.rgb, A);\n            }`;\n\n        const uniforms = {\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            }\n        };\n\n        if (dynamicMode) {\n            uniforms['transformIndexesTexture'] = {\n                'type': 't',\n                'value': null\n            };\n            const transformMatrices = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                transformMatrices.push(new THREE.Matrix4());\n            }\n            uniforms['transforms'] = {\n                'type': 'mat4',\n                'value': transformMatrices\n            };\n            uniforms['transformIndexesTextureSize'] = {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            };\n        }\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static buildGeomtery(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = maxSplatCount;\n\n        return geometry;\n    }\n\n    /**\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n     * @param {Array<object>} sceneOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildScenes(splatBuffers, sceneOptions) {\n        const scenes = [];\n        scenes.length = splatBuffers.length;\n        for (let i = 0; i < splatBuffers.length; i++) {\n            const splatBuffer = splatBuffers[i];\n            const options = sceneOptions[i] || {};\n            let positionArray = options['position'] || [0, 0, 0];\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\n            let scaleArray = options['scale'] || [1, 1, 1];\n            const position = new THREE.Vector3().fromArray(positionArray);\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\n            const scale = new THREE.Vector3().fromArray(scaleArray);\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale);\n        }\n        return scenes;\n    }\n\n    static createScene(splatBuffer, position, rotation, scale) {\n        return new SplatScene(splatBuffer, position, rotation, scale);\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single scene.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = [];\n        const sceneIndexMap = [];\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const splatCount = splatBuffer.getSplatCount();\n            for (let i = 0; i < splatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                sceneIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            sceneIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {SplatMesh} splatMesh SplatMesh instance for which the splat tree will be built\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n     * @return {SplatTree}\n     */\n    static buildSplatTree(splatMesh, minAlphas = []) {\n        // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n        // be configured on a per-scene basis\n        const splatTree = new SplatTree(8, 1000);\n        console.time('SplatTree build');\n        const splatColor = new THREE.Vector4();\n        splatTree.processSplatMesh(splatMesh, (splatIndex) => {\n            splatMesh.getSplatColor(splatIndex, splatColor);\n            const sceneIndex = splatMesh.getSceneIndexForSplat(splatIndex);\n            const minAlpha = minAlphas[sceneIndex] || 1;\n            return splatColor.w >= minAlpha;\n        });\n        console.timeEnd('SplatTree build');\n\n        let leavesWithVertices = 0;\n        let avgSplatCount = 0;\n        let maxSplatCount = 0;\n        let nodeCount = 0;\n\n        splatTree.visitLeaves((node) => {\n            const nodeSplatCount = node.data.indexes.length;\n            if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n            }\n        });\n        console.log(`SplatTree leaves: ${splatTree.countLeaves()}`);\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n        avgSplatCount = avgSplatCount / nodeCount;\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\n        console.log(`Total splat count: ${splatMesh.getSplatCount()}`);\n        return splatTree;\n    }\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {Boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n     *                                      says to keep the transform from the existing scene.\n     */\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true) {\n        this.disposeMeshData();\n        const totalSplatCount = SplatMesh.getTotalSplatCountForSplatBuffers(splatBuffers);\n\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\n        if (keepSceneTransforms) {\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n                const newScene = newScenes[i];\n                const existingScene = this.getScene(i);\n                newScene.copyTransformData(existingScene);\n            }\n        }\n        this.scenes = newScenes;\n\n        this.geometry = SplatMesh.buildGeomtery(totalSplatCount);\n        this.material = SplatMesh.buildMaterial(this.dynamicMode);\n        const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n        this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n        this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n        this.splatTree = SplatMesh.buildSplatTree(this, sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1));\n\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        this.resetDataFromSplatBuffers();\n    }\n\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        if (this.enableDistancesComputationOnGPU) {\n            this.disposeDistancesComputationGPUResources();\n        }\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n        this.splatTree = null;\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    /**\n     * Refresh data textures and GPU buffers for splat distance pre-computation with data from the splat buffers for this mesh.\n     */\n    resetDataFromSplatBuffers() {\n        this.uploadSplatDataToTextures();\n        if (this.enableDistancesComputationOnGPU) {\n            this.updateGPUCentersBufferForDistancesComputation();\n            this.updateGPUTransformIndexesBufferForDistancesComputation();\n        }\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     */\n    uploadSplatDataToTextures() {\n\n        const splatCount = this.getSplatCount();\n\n        const covariances = new Float32Array(splatCount * 6);\n        const centers = new Float32Array(splatCount * 3);\n        const colors = new Uint8Array(splatCount * 4);\n        this.fillSplatDataArrays(covariances, centers, colors);\n\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\n        const TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\n            covariancesTextureSize.y *= 2;\n        }\n\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\n            centersColorsTextureSize.y *= 2;\n        }\n\n        let covariancesTexture;\n        let paddedCovariances;\n        if (this.halfPrecisionCovariancesOnGPU) {\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            for (let i = 0; i < covariances.length; i++) {\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(covariances[i]);\n            }\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\n        } else {\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            paddedCovariances.set(covariances);\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\n        }\n        covariancesTexture.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\n\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        for (let c = 0; c < splatCount; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(colors[colorsBase], colors[colorsBase + 1],\n                                                                 colors[colorsBase + 2], colors[colorsBase + 3]);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n        }\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColorsTexture.internalFormat = 'RGBA32UI';\n        centersColorsTexture.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covariancesTexture,\n                'size': covariancesTextureSize\n            },\n            'centerColors': {\n                'data': paddedCenterColors,\n                'texture': centersColorsTexture,\n                'size': centersColorsTextureSize\n            }\n        };\n\n        if (this.dynamicMode) {\n            const transformIndexesTextureSize = new THREE.Vector2(4096, 1024);\n            while (transformIndexesTextureSize.x * transformIndexesTextureSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL < splatCount) {\n                transformIndexesTextureSize.y *= 2;\n            }\n\n            const paddedTransformIndexes = new Uint32Array(transformIndexesTextureSize.x *\n                                                           transformIndexesTextureSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\n            for (let c = 0; c < splatCount; c++) {\n                paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            }\n            const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTextureSize.x,\n                                                                  transformIndexesTextureSize.y, THREE.RedIntegerFormat,\n                                                                  THREE.UnsignedIntType);\n            transformIndexesTexture.internalFormat = 'R32UI';\n            transformIndexesTexture.needsUpdate = true;\n            this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\n            this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTextureSize);\n            this.material.uniformsNeedUpdate = true;\n            this.splatDataTextures['tansformIndexes'] = {\n                'data': paddedTransformIndexes,\n                'texture': transformIndexesTexture,\n                'size': transformIndexesTextureSize\n            };\n        }\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    /**\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\n     * quaternion, and scale)\n     */\n    updateTransforms() {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            scene.updateTransform();\n        }\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(2.0 / viewport.x, 2.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                if (this.dynamicMode) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\n                    }\n                }\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    /**\n     * Set the Three.js renderer used by this splat mesh\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n     */\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                this.updateGPUCentersBufferForDistancesComputation();\n                this.updateGPUTransformIndexesBufferForDistancesComputation();\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentRenderer;\n        let currentSplatCount;\n\n        return function() {\n            const splatCount = this.getSplatCount();\n\n            if (!this.renderer || (currentRenderer === this.renderer && currentSplatCount === splatCount)) return;\n            const rebuildGPUObjects = (currentRenderer !== this.renderer);\n            const rebuildBuffers = currentSplatCount !== splatCount;\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[transformIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            } else {\n                vsSource =\n                `#version 300 es\n                in vec3 center;\n                flat out float distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            if (this.dynamicMode) {\n                this.distancesTransformFeedback.transformIndexesLoc =\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\n                for (let i = 0; i < this.scenes.length; i++) {\n                    this.distancesTransformFeedback.transformsLocs[i] =\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\n                }\n            } else {\n                this.distancesTransformFeedback.modelViewProjLoc =\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\n                }\n\n                if (this.dynamicMode) {\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, splatCount * 4, gl.STATIC_READ);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            currentRenderer = this.renderer;\n            currentSplatCount = splatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n     */\n    updateGPUCentersBufferForDistancesComputation() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n        if (this.integerBasedDistancesComputation) {\n            const intCenters = this.getIntegerCenters(true);\n            gl.bufferData(gl.ARRAY_BUFFER, intCenters, gl.STATIC_DRAW);\n        } else {\n            const floatCenters = this.getFloatCenters(false);\n            gl.bufferData(gl.ARRAY_BUFFER, floatCenters, gl.STATIC_DRAW);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n     */\n    updateGPUTransformIndexesBufferForDistancesComputation() {\n\n        if (!this.renderer || !this.dynamicMode) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.getTransformIndexes(), gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\n     * @return {Uint32Array}\n     */\n    getTransformIndexes() {\n        const transformIndexes = new Uint32Array(this.globalSplatIndexToSceneIndexMap.length);\n        transformIndexes.set(this.globalSplatIndexToSceneIndexMap);\n        return transformIndexes;\n    }\n\n    /**\n     * Fill 'array' with the transforms for each scene in this splat mesh.\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n     */\n    fillTransformsArray = function() {\n\n        const tempArray = [];\n\n        return function(array) {\n            if (tempArray.length !== array.length) tempArray.length = array.length;\n            for (let i = 0; i < this.scenes.length; i++) {\n                const sceneTransform = this.getScene(i).transform;\n                const sceneTransformElements = sceneTransform.elements;\n                for (let j = 0; j < 16; j++) {\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\n                }\n            }\n            array.set(tempArray);\n        };\n\n    }();\n\n    computeDistancesOnGPU = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(modelViewProjMatrix, outComputedDistances) {\n            if (!this.renderer) return;\n\n            // console.time(\"gpu_compute_distances\");\n            const gl = this.renderer.getContext();\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            gl.enable(gl.RASTERIZER_DISCARD);\n\n            if (this.dynamicMode) {\n                for (let i = 0; i < this.scenes.length; i++) {\n                    tempMatrix.copy(this.getScene(i).transform);\n                    tempMatrix.premultiply(modelViewProjMatrix);\n\n                    if (this.integerBasedDistancesComputation) {\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\n                                                                                        iTransform[2], iTransform[3]);\n                    } else {\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\n                    }\n                }\n            } else {\n                if (this.integerBasedDistancesComputation) {\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n                } else {\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n                }\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n            if (this.integerBasedDistancesComputation) {\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n            } else {\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\n            }\n\n            if (this.dynamicMode) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n            }\n\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            gl.beginTransformFeedback(gl.POINTS);\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n            gl.endTransformFeedback();\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n            gl.disable(gl.RASTERIZER_DISCARD);\n\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n\n            const promise = new Promise((resolve) => {\n                const checkSync = () => {\n                    const timeout = 0;\n                    const bitflags = 0;\n                    const status = gl.clientWaitSync(sync, bitflags, timeout);\n                    switch (status) {\n                        case gl.TIMEOUT_EXPIRED:\n                            return setTimeout(checkSync);\n                        case gl.WAIT_FAILED:\n                            throw new Error('should never get here');\n                        default:\n                            gl.deleteSync(sync);\n                            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n                            gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                            if (currentVao) gl.bindVertexArray(currentVao);\n\n                            // console.timeEnd(\"gpu_compute_distances\");\n\n                            resolve();\n                    }\n                };\n                setTimeout(checkSync);\n            });\n\n            if (currentProgram) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            return promise;\n        };\n\n    }();\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n     *                                       be null.\n     */\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\n            returnSceneTransform = this.dynamicMode ? false : true;\n        }\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n     */\n    fillSplatDataArrays(covariances, centers, colors, applySceneTransform) {\n        let offset = 0;\n        for (let i = 0; i < this.scenes.length; i++) {\n            if (applySceneTransform === undefined || applySceneTransform === null) {\n                applySceneTransform = this.dynamicMode ? false : true;\n            }\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            const sceneTransform = applySceneTransform ? scene.transform : null;\n            if (covariances) splatBuffer.fillSplatCovarianceArray(covariances, offset, sceneTransform);\n            if (centers) splatBuffer.fillSplatCenterArray(centers, offset, sceneTransform);\n            if (colors) splatBuffer.fillSplatColorArray(colors, offset, sceneTransform);\n            offset += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1000 after every 3 values\n     * @return {Int32Array}\n     */\n    getIntegerCenters(padFour) {\n        const splatCount = this.getSplatCount();\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\n        }\n        return intCenters;\n    }\n\n\n    /**\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values\n     * @return {Float32Array}\n     */\n    getFloatCenters(padFour) {\n        const splatCount = this.getSplatCount();\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n     *                                      the default behavior will apply.\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n     */\n    getSceneTransform(sceneIndex, outTransform) {\n        const scene = this.getScene(sceneIndex);\n        scene.updateTransform();\n        outTransform.copy(scene.transform);\n    }\n\n    /**\n     * Get the scene at 'sceneIndex'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @return {SplatScene}\n     */\n    getScene(sceneIndex) {\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n        }\n        return this.scenes[sceneIndex];\n    }\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\n    }\n\n    getSceneIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\n    }\n\n    getSceneTransformForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let dynamicMode;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let transformIndexesOffset;\n    let transformsOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\n            transforms.set(copyTransforms);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\n                                         dynamicMode);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        const transferBuffers = [];\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            const sortedIndexesOut = new Uint32Array(splatRenderCount);\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut.buffer;\n            transferBuffers.push(sortedIndexesOut.buffer);\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage, transferBuffers);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            transformIndexes = e.data.transformIndexes;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset, splatCount * 4).set(new Float32Array(centers));\n            }\n            if (dynamicMode) {\n                new Uint32Array(wasmMemory, transformIndexesOffset, splatCount).set(new Uint32Array(transformIndexes));\n            }\n            self.postMessage({\n                'sortSetupComplete': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            let copyTransforms;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                copyTransforms = e.data.sort.transforms;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n            dynamicMode = e.data.init.dynamicMode;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const matrixSize = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForModelViewProjectionMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredforTransformIndexes +\n                                        memoryRequiredforTransforms +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\n                        'transformsBuffer': wasmMemory,\n                        'transformsOffset': transformsOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            'dynamicMode': dynamicMode,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize,\n                'MaxScenes': Constants.MaxScenes\n            }\n        }\n    });\n    return worker;\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './PlyLoader.js';\nimport { SplatLoader } from './SplatLoader.js';\nimport { LoadingSpinner } from './LoadingSpinner.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\nimport { AbortablePromise } from './AbortablePromise.js';\nimport { SceneFormat } from './SceneFormat.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        if (options.halfPrecisionCovariancesOnGPU === undefined || options.halfPrecisionCovariancesOnGPU === null) {\n            options.halfPrecisionCovariancesOnGPU = true;\n        }\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU;\n\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.threeScene = options.threeScene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort;\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\n            if (this.isMobile()) this.gpuAcceleratedSort = false;\n            else this.gpuAcceleratedSort = true;\n        }\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n        // SplatMesh.getSplatCenter() by default.\n        const dynamicScene = !!options.dynamicScene;\n        this.splatMesh = new SplatMesh(dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\n                                       this.gpuAcceleratedSort, this.integerBasedSort);\n\n        this.controls = null;\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n        this.sortWorkerTransforms = null;\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderingInitialized = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n        this.infoPanelCells = {};\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.resizeObserver = null;\n        this.mouseMoveListener = null;\n        this.mouseDownListener = null;\n        this.mouseUpListener = null;\n        this.keyDownListener = null;\n\n        this.sortPromise = null;\n        this.sortPromiseResolver = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        if (!this.dropInMode) this.init();\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.lookAt(this.initialCameraLookAt);\n            this.camera.up.copy(this.cameraUp).normalize();\n        }\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            this.resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n            });\n            this.resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n        this.threeScene = this.threeScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.threeScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        if (this.useBuiltInControls) {\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n            this.controls.listenToKeyEvents(window);\n            this.controls.rotateSpeed = 0.5;\n            this.controls.maxPolarAngle = Math.PI * .75;\n            this.controls.minPolarAngle = 0.1;\n            this.controls.enableDamping = true;\n            this.controls.dampingFactor = 0.05;\n            this.controls.target.copy(this.initialCameraLookAt);\n            this.mouseMoveListener = this.onMouseMove.bind(this);\n            this.rootElement.addEventListener('pointermove', this.mouseMoveListener, false);\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.rootElement.addEventListener('pointerdown', this.mouseDownListener, false);\n            this.mouseUpListener = this.onMouseUp.bind(this);\n            this.rootElement.addEventListener('pointerup', this.mouseUpListener, false);\n            this.keyDownListener = this.onKeyDown.bind(this);\n            window.addEventListener('keydown', this.keyDownListener, false);\n        }\n\n        this.setupInfoPanel();\n        this.loadingSpinner.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    removeEventHandlers() {\n        if (this.useBuiltInControls) {\n            this.rootElement.removeEventListener('pointermove', this.mouseMoveListener);\n            this.mouseMoveListener = null;\n            this.rootElement.removeEventListener('pointerdown', this.mouseDownListener);\n            this.mouseDownListener = null;\n            this.rootElement.removeEventListener('pointerup', this.mouseUpListener);\n            this.mouseUpListener = null;\n            window.removeEventListener('keydown', this.keyDownListener);\n            this.keyDownListener = null;\n        }\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyP':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.style.display = 'block';\n                    } else {\n                        this.infoPanel.style.display = 'none';\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const hit = outHits[0];\n                    const intersectionPoint = hit.origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setupInfoPanel() {\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.style.position = 'absolute';\n        this.infoPanel.style.padding = '10px';\n        this.infoPanel.style.backgroundColor = '#cccccc';\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\n        this.infoPanel.style.zIndex = 100;\n        this.infoPanel.style.width = '375px';\n        this.infoPanel.style.fontFamily = 'arial';\n        this.infoPanel.style.fontSize = '10pt';\n        this.infoPanel.style.textAlign = 'left';\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Render window', 'renderWindow'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime']\n        ];\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.style.width = '110px';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanel.style.display = 'none';\n        this.renderer.domElement.parentElement.prepend(this.infoPanel);\n    }\n\n    updateSplatMesh = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.splatMesh.updateTransforms();\n                this.getRenderDimensions(renderDimensions);\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\n            }\n        };\n\n    }();\n\n    /**\n     * Add a splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\n        if (options.showLoadingSpinner) this.loadingSpinner.show();\n        const downloadProgress = (percent, percentLabel) => {\n            if (options.showLoadingSpinner) {\n                if (percent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    const suffix = percentLabel ? `: ${percentLabel}` : `...`;\n                    this.loadingSpinner.setMessage(`Downloading${suffix}`);\n                }\n            }\n            if (options.onProgress) options.onProgress(percent, percentLabel, 'downloading');\n        };\n        const loadPromise = this.loadFileToSplatBuffer(path, options.splatAlphaRemovalThreshold, downloadProgress, options.format);\n        return new AbortablePromise((resolve, reject) => {\n            loadPromise.then((splatBuffer) => {\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\n                if (options.onProgress) options.onProgress(0, '0%', 'processing');\n                const splatBufferOptions = {\n                    'rotation': options.rotation || options.orientation,\n                    'position': options.position,\n                    'scale': options.scale,\n                    'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n                };\n                this.addSplatBuffers([splatBuffer], [splatBufferOptions], options.showLoadingSpinner).then(() => {\n                    if (options.onProgress) options.onProgress(100, '100%', 'processing');\n                    resolve();\n                });\n            })\n            .catch(() => {\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\n                reject(new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\n            });\n        }, loadPromise.abortHandler);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingSpinner = true, onProgress = undefined) {\n        const fileCount = sceneOptions.length;\n        const percentComplete = [];\n        if (showLoadingSpinner) this.loadingSpinner.show();\n        const downloadProgress = (fileIndex, percent, percentLabel) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingSpinner) {\n                if (totalPercent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\n                }\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, 'downloading');\n        };\n\n        const loadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < sceneOptions.length; i++) {\n            const loadPromise = this.loadFileToSplatBuffer(sceneOptions[i].path, sceneOptions[i].splatAlphaRemovalThreshold,\n                                                           downloadProgress.bind(this, i), sceneOptions.format);\n            abortHandlers.push(loadPromise.abortHandler);\n            loadPromises.push(loadPromise.promise);\n        }\n        const abortHandler = () => {\n            for (let abortHandler of abortHandlers) {\n                abortHandler();\n            }\n        };\n        return new AbortablePromise((resolve, reject) => {\n            Promise.all(loadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingSpinner) this.loadingSpinner.hide();\n                if (onProgress) options.onProgress(0, '0%', 'processing');\n                this.addSplatBuffers(splatBuffers, sceneOptions, showLoadingSpinner).then(() => {\n                    if (onProgress) onProgress(100, '100%', 'processing');\n                    resolve();\n                });\n            })\n            .catch(() => {\n                if (showLoadingSpinner) this.loadingSpinner.hide();\n                reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\n            });\n        }, abortHandler);\n    }\n\n    /**\n     *\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @param {string} format Optional format specifier, if not specified the format will be inferred from the file extension\n     * @return {AbortablePromise}\n     */\n    loadFileToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined, format = undefined) {\n        const downloadProgress = (percent, percentLabel) => {\n            if (onProgress) onProgress(percent, percentLabel, 'downloading');\n        };\n        if (format) {\n            if (format === SceneFormat.Splat || format === SceneFormat.KSplat) {\n                return new SplatLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold, undefined, undefined, format);\n            } else if (format === SceneFormat.Ply) {\n                return new PlyLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\n            }\n        } else {\n            if (SplatLoader.isFileSplatFormat(path)) {\n                return new SplatLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\n            } else if (path.endsWith('.ply')) {\n                return new PlyLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\n            }\n        }\n\n        return AbortablePromise.reject(new Error(`Viewer::loadFileToSplatBuffer -> File format not supported: ${path}`));\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        let loadPromise;\n        let loadCount = 0;\n\n        return function(splatBuffers, splatBufferOptions = [], showLoadingSpinner = true) {\n            this.splatRenderingInitialized = false;\n            loadCount++;\n            const performLoad = () => {\n                return new Promise((resolve) => {\n                    if (showLoadingSpinner) {\n                        this.loadingSpinner.show();\n                        this.loadingSpinner.setMessage(`Processing splats...`);\n                    }\n                    window.setTimeout(() => {\n                        this.disposeSortWorker();\n                        this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions);\n                        this.setupSortWorker(this.splatMesh).then(() => {\n                            loadCount--;\n                            if (loadCount === 0) {\n                                if (showLoadingSpinner) this.loadingSpinner.hide();\n                                this.splatRenderingInitialized = true;\n                            }\n                            resolve();\n                        });\n                    }, 1);\n                });\n            };\n            if (!loadPromise) {\n                loadPromise = performLoad();\n            } else {\n                loadPromise = loadPromise.then(() => {\n                    return performLoad();\n                });\n            }\n            return loadPromise;\n        };\n\n    }();\n\n    disposeSortWorker() {\n        if (this.sortWorker) this.sortWorker.terminate();\n        this.sortWorker = null;\n        this.sortRunning = false;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     */\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions) {\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\n        allSplatBuffers.push(...splatBuffers);\n        allSplatBufferOptions.push(...splatBufferOptions);\n        this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true);\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n        this.splatMesh.frustumCulled = false;\n    }\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        return new Promise((resolve) => {\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const sortWorker = createSortWorker(splatCount, this.sharedMemoryForWorkers, this.integerBasedSort, this.splatMesh.dynamicMode);\n            sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                    this.sortPromiseResolver();\n                    this.sortPromise = null;\n                    this.sortPromiseResolver = null;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    console.log('Sorting web worker WASM setup complete.');\n                    const centers = this.integerBasedSort ? this.splatMesh.getIntegerCenters(true) : this.splatMesh.getFloatCenters(true);\n                    const transformIndexes = this.splatMesh.getTransformIndexes();\n                    sortWorker.postMessage({\n                        'centers': centers.buffer,\n                        'transformIndexes': transformIndexes.buffer\n                    });\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, splatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, splatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                     e.data.precomputedDistancesOffset,\n                                                                                     splatCount);\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(splatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(splatCount);\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                } else if (e.data.sortSetupComplete) {\n                    console.log('Sorting web worker ready.');\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    this.sortWorker = sortWorker;\n                    resolve();\n                }\n            };\n        });\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            cancelAnimationFrame(this.requestFrameId);\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    /**\n     * Dispose of all resources held directly and indirectly by this viewer.\n     */\n    async dispose() {\n        if (this.sortPromise) {\n            await this.sortPromise;\n        }\n        this.stop();\n        if (this.controls) {\n            this.controls.dispose();\n            this.controls = null;\n        }\n        if (this.splatMesh) {\n            this.splatMesh.dispose();\n            this.splatMesh = null;\n        }\n        if (this.sceneHelper) {\n            this.sceneHelper.dispose();\n            this.sceneHelper = null;\n        }\n        if (this.resizeObserver) {\n            this.resizeObserver.unobserve(this.rootElement);\n            this.resizeObserver = null;\n        }\n        if (this.renderer) {\n            if (!this.usingExternalRenderer) this.renderer.dispose();\n            this.renderer = null;\n        }\n        this.disposeSortWorker();\n        this.removeEventHandlers();\n        this.camera = null;\n        this.threeScene = null;\n        this.splatRenderingInitialized = false;\n        this.initialized = false;\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        this.render();\n    }\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderingInitialized) return;\n            const hasRenderables = (threeScene) => {\n                for (let child of threeScene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n            const savedAuoClear = this.renderer.autoClear;\n            this.renderer.autoClear = false;\n            if (hasRenderables(this.threeScene)) this.renderer.render(this.threeScene, this.camera);\n            this.renderer.render(this.splatMesh, this.camera);\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderingInitialized) return;\n        if (this.controls) this.controls.update();\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMesh();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            const calcDelta = currentTime - lastCalcTime;\n            if (calcDelta >= 1.0) {\n                this.currentFPS = frameCount;\n                frameCount = 0;\n                lastCalcTime = currentTime;\n            } else {\n                frameCount++;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n\n        return function() {\n            this.renderer.getSize(currentRendererSize);\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                if (!this.usingExternalCamera) {\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    this.camera.updateProjectionMatrix();\n                }\n                lastRendererSize.copy(currentRendererSize);\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            const fadeInSpeed = 10.0;\n            const fadeOutSpeed = 2.5;\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + fadeInSpeed * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - fadeOutSpeed * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n\n            const cameraPos = this.camera.position;\n            const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\n\n            const cameraLookAt = this.controls.target;\n            const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\n\n            const cameraUp = this.camera.up;\n            const cameraUpString = `[${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraUp.innerHTML = cameraUpString;\n\n            if (this.showMeshCursor) {\n                const cursorPos = this.sceneHelper.meshCursor.position;\n                const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\n                this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\n            } else {\n                this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\n            }\n\n            this.infoPanelCells.fps.innerHTML = this.currentFPS;\n            this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n            const renderPct = this.splatRenderCount / splatCount * 100;\n            this.infoPanelCells.renderSplatCount.innerHTML =\n                `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\n\n            this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n        let runCount = 0;\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return async function(force = false, gatherAllNodes = false) {\n            if (this.sortRunning) return;\n            if (!this.initialized || !this.splatRenderingInitialized) return;\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force && !this.splatMesh.dynamicMode && queuedSorts.length === 0 && runCount > 0) {\n                if (angleDiff <= 0.95) needsRefreshForRotation = true;\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n            }\n\n            this.sortRunning = true;\n            this.splatRenderCount = this.gatherSceneNodesForSort(gatherAllNodes);\n            this.sortPromise = new Promise((resolve) => {\n                this.sortPromiseResolver = resolve;\n            });\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n\n            if (this.splatMesh.dynamicMode) {\n                queuedSorts.push(this.splatRenderCount);\n            } else {\n                if (queuedSorts.length === 0) {\n                    for (let partialSort of partialSorts) {\n                        if (angleDiff < partialSort.angleThreshold) {\n                            for (let sortFraction of partialSort.sortFractions) {\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                            }\n                            break;\n                        }\n                    }\n                    queuedSorts.push(this.splatRenderCount);\n                }\n            }\n            const sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            const sortMessage = {\n                'modelViewProj': mvpMatrix.elements,\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (this.splatMesh.dynamicMode) {\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n            }\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                sortMessage.transforms = this.sortWorkerTransforms;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n            runCount++;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const modelView = new THREE.Matrix4();\n        const baseModelView = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        const MaximumDistanceToRender = 125;\n\n        return function(gatherAllNodes) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n\n            const splatTree = this.splatMesh.getSplatTree();\n            baseModelView.copy(this.camera.matrixWorld).invert();\n            baseModelView.multiply(this.splatMesh.matrixWorld);\n\n            let nodeRenderCount = 0;\n            let splatRenderCount = 0;\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n                modelView.copy(baseModelView);\n                if (this.splatMesh.dynamicMode) {\n                    this.splatMesh.getSceneTransform(s, sceneTransform);\n                    modelView.multiply(sceneTransform);\n                }\n                const nodeCount = subTree.nodesWithIndexes.length;\n                for (let i = 0; i < nodeCount; i++) {\n                    const node = subTree.nodesWithIndexes[i];\n                    tempVector.copy(node.center).applyMatrix4(modelView);\n\n                    const distanceToNode = tempVector.length();\n                    tempVector.normalize();\n\n                    tempVectorYZ.copy(tempVector).setX(0).normalize();\n                    tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                    const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                    const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                    const ns = nodeSize(node);\n                    const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                    const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                    if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\n                        continue;\n                    }\n                    splatRenderCount += node.data.indexes.length;\n                    nodeRenderList[nodeRenderCount] = node;\n                    node.data.distanceToNode = distanceToNode;\n                    nodeRenderCount++;\n                }\n            }\n\n            nodeRenderList.length = nodeRenderCount;\n            nodeRenderList.sort((a, b) => {\n                if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                else return 1;\n            });\n\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n            for (let i = 0; i < nodeRenderCount; i++) {\n                const node = nodeRenderList[i];\n                const windowSizeInts = node.data.indexes.length;\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\n                destView.set(node.data.indexes);\n                currentByteOffset -= windowSizeBytes;\n            }\n\n            return splatRenderCount;\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.splatMesh.getScene(sceneIndex);\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\n        const loadPromise = this.viewer.addSplatScene(path, options);\n        loadPromise.then(() => {\n            this.add(this.viewer.splatMesh);\n        });\n        return loadPromise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingSpinner) {\n        if (showLoadingSpinner !== false) showLoadingSpinner = true;\n        const loadPromise = this.viewer.addSplatScenes(sceneOptions, showLoadingSpinner);\n        loadPromise.then(() => {\n            this.add(this.viewer.splatMesh);\n        });\n        return loadPromise;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.viewer.getSplatScene(sceneIndex);\n    }\n\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["SplatBuffer","static","BytesPerCenter","BytesPerScale","BytesPerColor","BytesPerRotation","ScaleRange","constructor","bufferData","this","headerBufferData","ArrayBuffer","HeaderSizeBytes","headerArrayUint8","Uint8Array","headerArrayUint32","Uint32Array","headerArrayFloat32","Float32Array","set","versionMajor","versionMinor","headerExtraK","compressionLevel","splatCount","bucketSize","bucketCount","bucketBlockSize","halfBucketBlockSize","bytesPerBucket","compressionScaleRange","CompressionLevels","compressionScaleFactor","dataBufferSizeBytes","byteLength","splatBufferData","bytesPerCenter","bytesPerScale","bytesPerColor","bytesPerRotation","bytesPerSplat","linkBufferArrays","FloatArray","Uint16Array","centerArray","CenterComponentCount","scaleArray","ScaleComponentCount","colorArray","ColorComponentCount","rotationArray","RotationComponentCount","bucketsBase","fbf","f","THREE","DataUtils","fromHalfFloat","getHeaderBufferData","getSplatBufferData","getSplatCount","getSplatCenter","index","outCenter","transform","bucket","centerBase","sf","sr","bucketIndex","Math","floor","x","y","z","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","outScale","outRotation","scaleBase","rotationBase","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","colorBase","fillSplatCenterArray","outCenterArray","destOffset","center","i","centerSrcBase","centerDestBase","fillSplatCovarianceArray","covarianceArray","scale","rotation","Quaternion","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","tempMatrix4","setFromMatrix4","transpose","premultiply","covBase","CovarianceSizeFloats","elements","fillSplatColorArray","outColorArray","colorSrcBase","colorDestBase","AbortablePromise","promiseFunc","abortHandler","promiseResolve","promiseReject","promise","Promise","resolve","reject","bind","args","error","then","onResolve","onResolveResult","args2","catch","onFail","abort","data","floatView","int32View","Int32Array","buffer","uintEncodedFloat","fetchWithProgress","path","onProgress","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","clamp","val","min","max","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","UncompressedSplatArray","scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","f_dc_0","f_dc_1","f_dc_2","opacity","addSplat","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","SplatCompressor","minimumAlpha","blockSize","createEmptyUncompressedSplatArray","uncompressedSplatArrayToSplatBuffer","splatArray","validSplats","alpha","buckets","computeBucketsForUncompressedSplatArray","paddedSplatCount","headerSize","header","centerBuffer","scaleBuffer","colorBuffer","rotationBuffer","blockHalfSize","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatIndex","fromArray","splats","row","invalidSplat","rot","quat","normalize","w","thf","toHalfFloat","sub","round","rgba","Uint8ClampedArray","bucketsSize","splatDataBufferSize","unifiedBufferSize","unifiedBuffer","bucketArray","base","halfBlockSize","dimensions","yBlocks","ceil","zBlocks","blockCenter","fullBuckets","partiallyFullBuckets","xBlock","yBlock","zBlock","bucketId","toArray","hasOwnProperty","PlyParser","plyBuffer","decodeHeader","decoder","TextDecoder","headerOffset","headerText","console","log","readChunkSize","Error","headerChunk","decode","endHeaderTestChunk","includes","headerLines","split","propertyTypes","line","trim","startsWith","splatCountMatch","match","propertyMatch","propertyType","vertexByteOffset","indexOf","vertexData","DataView","readRawVertexFast","offset","fieldOffsets","propertiesToRead","outVertex","rawVertex","property","getFloat32","getUint8","parseToSplatBuffer","startTime","nRestCoeffs","propertyName","nCoeffsPerColor","shFeatureOrder","rgb","plyRowSize","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","type","exp","SH_C0","splatBuffer","endTime","PlyLoader","loadFromURL","fileName","plyFileData","SceneFormat","Splat","KSplat","Ply","SplatLoader","downLoadLink","isFileSplatFormat","isCustomSplatFormat","isStandardSplatFormat","endsWith","format","splatCompressor","parseStandardSplatToUncompressedSplatArray","inBuffer","inCenterSizeBytes","inScaleSizeBytes","inColorSizeBytes","inBase","inCenter","inScale","inColor","inRotation","setFromBuffer","downloadFile","headerData","splatData","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","super","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","clampDistance","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","spinnerDivContainerOuter","className","display","spinnerDivContainer","spinnerDiv","messageDiv","innerHTML","show","hide","setContainer","removeChild","zIndex","setMessage","msg","ArrowHelper","Object3D","dir","color","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","remove","setMeshCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","viewport","matrixWorld","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","point","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","t","Hit","splatIndex","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","s","subTrees","subTree","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","forEach","hit","sort","a","tempColor","Vector4","tempCenter","tempScale","tempRotation","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","uniformScale","log10","SplatScene","updateTransform","copyTransformData","otherScene","compose","idGen","SplatTreeNode","depth","id","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","addedIndexes","nodesWithIndexes","SplatTree","processSplatMesh","filterFunc","buildSubTree","splatOffset","validSplatCount","globalSplatIndex","dynamicMode","scenes","getScene","processNode","tree","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","j","containsPoint","childNode","countLeaves","leafCount","visitLeaves","visitFunc","visitLeavesFromNode","Constants","dummyGeometry","BufferGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","renderer","splatDataTextures","distancesTransformFeedback","program","centersBuffer","transformIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","transformIndexesLoc","transformsLocs","globalSplatIndexToLocalSplatIndexMap","globalSplatIndexToSceneIndexMap","buildMaterial","vertexShaderSource","MaxScenes","covariancesTexture","centersColorsTexture","focal","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","transformMatrices","alphaTest","NormalBlending","buildGeomtery","maxSplatCount","baseGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","buildScenes","splatBuffers","sceneOptions","options","positionArray","createScene","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","totalSplatCount","buildSplatTree","minAlphas","time","splatColor","sceneIndex","getSceneIndexForSplat","minAlpha","timeEnd","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","build","keepSceneTransforms","disposeMeshData","getTotalSplatCountForSplatBuffers","newScenes","newScene","existingScene","indexMaps","map","splatAlphaRemovalThreshold","setupDistancesComputationTransformFeedback","resetDataFromSplatBuffers","disposeDistancesComputationGPUResources","textureKey","textureContainer","texture","uploadSplatDataToTextures","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","covariances","centers","colors","fillSplatDataArrays","paddedCovariances","DataTexture","RGFormat","HalfFloatType","FloatType","paddedCenterColors","c","colorsBase","centersBase","centerColorsBase","RGBAIntegerFormat","internalFormat","size","centerColors","transformIndexesTextureSize","paddedTransformIndexes","transformIndexesTexture","RedIntegerFormat","updateRenderIndexes","globalIndexes","renderSplatCount","attributes","updateTransforms","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","transforms","getSplatDataTextures","getTotalSplatCountForScenes","scene","gl","getContext","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","currentRenderer","currentSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","VERTEX_SHADER","FRAGMENT_SHADER","errors","getShaderInfoLog","vsSource","currentVao","getParameter","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","intCenters","getIntegerCenters","STATIC_DRAW","floatCenters","getFloatCenters","getTransformIndexes","transformIndexes","fillTransformsArray","tempArray","array","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","clientWaitSync","TIMEOUT_EXPIRED","setTimeout","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","padFour","componentCount","paddedFloatCenters","outTransform","matrixElements","intMatrixArray","sortWorker","self","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","transformIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","onmessage","e","postMessage","sortSetupComplete","renderCount","splatRenderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","BytesPerInt","BytesPerFloat","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortTime","transferBuffers","sortedIndexes","sortedIndexesOut","sortEndTime","init","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","createSortWorker","worker","Worker","toString","sorterWasmBinaryString","atob","charCodeAt","Viewer","cameraUp","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","window","gpuAcceleratedSort","isMobile","sharedMemoryForWorkers","dynamicScene","controls","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","selfDrivenModeRunning","splatRenderingInitialized","raycaster","infoPanel","infoPanelCells","currentFPS","lastSortTime","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","loadingSpinner","usingExternalCamera","usingExternalRenderer","initialized","parentElement","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","precision","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","observe","Scene","onMouseUp","setupInfoPanel","removeEventHandlers","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","padding","backgroundColor","border","fontFamily","fontSize","textAlign","layout","infoTable","layoutEntry","labelCell","spacerCell","infoCell","prepend","updateSplatMesh","projectionMatrix","addSplatScene","showLoadingSpinner","loadPromise","loadFileToSplatBuffer","suffix","splatBufferOptions","orientation","addSplatBuffers","addSplatScenes","fileCount","percentComplete","downloadProgress","fileIndex","totalPercent","loadPromises","abortHandlers","all","loadCount","performLoad","disposeSortWorker","addSplatBuffersToMesh","setupSortWorker","terminate","allSplatBuffers","allSplatBufferOptions","frustumCulled","DistancesArrayType","sortCanceled","start","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","unobserve","render","savedAuoClear","hasRenderables","updateForDropInMode","updateSplatSort","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","currentTime","lastRendererSize","currentRendererSize","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","lerp","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","cameraPos","cameraPosString","cameraPosition","cameraLookAt","cameraLookAtString","cameraUpString","cursorPos","cursorPosString","cursorPosition","fps","renderWindow","renderPct","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","runCount","partialSorts","angleThreshold","sortFractions","force","gatherAllNodes","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","gatherSceneNodesForSort","partialSort","sortFraction","shift","nodeRenderList","tempVectorYZ","tempVectorXZ","tempVector","modelView","baseModelView","tempMax","nodeSize","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","navigator","userAgent","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}